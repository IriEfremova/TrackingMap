@page "/navigationmap"
@using TrackingMap.Client.Services
@using NodaTime;
@using TrackingMap.Components.Models;

@inject IJSRuntime JS
@inject IInfluxService InfluxService
@inject IInfluxInfoService InfluxInfoService

@rendermode InteractiveWebAssembly
<button @onclick="ShowPrompt">Call showPrompt</button>

<div id="map" style="width: 100%; height: 400px; position:center"></div>

@code {
    private string? result;
    Dictionary<DateTime, PointModel> data;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initNavigationMap");
        }

        //Dictionary<Instant, PointModel> data = await InfluxService.GetDataForMap();
        data = await InfluxService.GetDataForMap();
        Console.WriteLine("OnAfterRenderAsync record = " + data.Count);
        foreach (var p in data)
        {
            Console.WriteLine($"Data key: {p.Key.ToString()}  value: {p.Value}");
        }
    }

    public async void ShowPrompt()
    {
        PointModel[] points = new PointModel[data.Count];
        int i = 0;
        foreach (var p in data)
        {
            points[i] = new PointModel(p.Value.Latitude, p.Value.Longitude);
            ++i;
        }
        Console.WriteLine("POINT COUNT = " + points.Length);
        //JS.InvokeAsync<Foo>("bar", new object[] { array });
        await JS.InvokeVoidAsync("showPrompt", new object[] { points });

        /*
        await JS.InvokeVoidAsync("showPrompt", (object)new PointModel[] {
                                new PointModel(37.64, 37.64),
                               new PointModel(49.64, 27.64) });
                        
         */

        //await JS.InvokeVoidAsync("showPrompt", new PointModel(37.64, 37.64));
        //await JS.InvokeVoidAsync("showPrompt", arr1);
        //StateHasChanged();
    }
}
