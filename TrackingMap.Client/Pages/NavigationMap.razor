@page "/navigationmap"
@using TrackingMap.Client.Services
@using NodaTime;
@using TrackingMap.Components.Models;

@inject IJSRuntime JS
@inject IInfluxService InfluxService
@inject IInfluxInfoService InfluxInfoService

@rendermode InteractiveWebAssembly
<button @onclick="ShowPrompt">Call showPrompt</button>

<div id="map" style="width: 100%; height: 400px; position:center"></div>

@code {
    private string? result;
    private InfluxConnectionData _connectionData;
    Dictionary<DateTime, PointModel>? data;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initNavigationMap");
        }

        if (InfluxInfoService.GetCurrentInfluxService().Token.Length == 0)
            await InfluxInfoService.GetInfluxServersList();

        _connectionData = InfluxInfoService.GetCurrentInfluxService();
        await InfluxService.SetConnectionData(_connectionData);
        data = await InfluxService.GetDataForMap();
        Console.WriteLine("OnAfterRenderAsync record = " + data.Count);
        /*
        foreach (var p in data)
        {
            Console.WriteLine($"Data key: {p.Key.ToString()}  value: {p.Value}");
        }
        */
    }

    public async void ShowPrompt()
    {
        if (data == null || data.Count <= 0)
            return;

        PointModel[] points = new PointModel[data.Count];
        int i = 0;
        foreach (var p in data)
        {
            points[i] = new PointModel(p.Value.Latitude, p.Value.Longitude);
            ++i;
        }
        Console.WriteLine("POINT COUNT = " + points.Length);
        await JS.InvokeVoidAsync("showPrompt", new object[] { points });
    }
}
